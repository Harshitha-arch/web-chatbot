# Requirements:
# pip install openai customtkinter requests pillow rapidfuzz spacy langchain langchain_community python-dotenv
# python -m spacy download en_core_web_sm

import os
import json
import requests
import threading
import customtkinter as ctk
import openai
import webbrowser
import math
import re

from dotenv import load_dotenv
load_dotenv()  # Loads .env API key if present

try:
    import spacy
    _SPACY_AVAILABLE = True
    try:
        nlp = spacy.load("en_core_web_sm")
    except:
        print("spaCy model not loaded.")
        nlp = None
        _SPACY_AVAILABLE = False
except ImportError:
    _SPACY_AVAILABLE = False
    nlp = None

from rapidfuzz import process, fuzz

from langchain_community.chat_models import ChatOpenAI
from langchain.agents import Tool, initialize_agent, AgentType

# ========== API KEY ==========
import os
openai.api_key = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY
if not openai.api_key or "sk-" not in openai.api_key:
    raise ValueError("Missing or invalid OPENAI_API_KEY. Please set your OpenAI API key.")

# ========== Load Data ==========
with open("buildings_with_aliases.json", encoding="utf-8") as f:
    BUILDINGS_DATA = json.load(f)
with open("navigation.json", encoding="utf-8") as f:
    NAV_DATA = json.load(f)
with open("university_info.json", encoding="utf-8") as f:
    UNIVERSITY_INFO = json.load(f)

# Build alias lookup
BUILDINGS = {}
def register_building(rec):
    key = rec["name"].lower()
    BUILDINGS[key] = rec
    for alias in rec.get("aliases", []):
        BUILDINGS[alias.lower()] = rec
for rec in BUILDINGS_DATA:
    register_building(rec)
    simple = rec["name"].split("(")[0].strip().lower()
    BUILDINGS[simple] = rec

# Google Maps will use user's real location
USER_ORIGIN = "My+Location"

# For OpenAI chat + memory
chat_history = [
    {"role": "system", "content": "You are WUEB-Bot, an expert assistant for WrocÅ‚aw University of Economics and Business."}
]

def ask_gpt(prompt: str) -> str:
    chat_history.append({"role": "user", "content": prompt})
    resp = openai.ChatCompletion.create(model="gpt-4", messages=chat_history, temperature=0.7)
    reply = resp.choices[0].message.content.strip()
    chat_history.append({"role": "assistant", "content": reply})
    return reply

# ========== AGENT TOOLS ==========

def university_info_tool(query: str) -> str:
    facts = json.dumps(UNIVERSITY_INFO, ensure_ascii=False)
    prompt = f"{query}\n\nUse the following university data:\n{facts}"
    return ask_gpt(prompt)

def navigation_tool(query: str) -> str:
    # Regex for "building X"
    m = re.search(r'building\s*([A-Za-z0-9]+)', query, re.IGNORECASE)
    if m:
        candidate = f"building {m.group(1).lower()}"
        if candidate in BUILDINGS:
            b = BUILDINGS[candidate]
            url = f"https://www.google.com/maps/dir/My+Location/{b['lat']},{b['lng']}"
            webbrowser.open(url)
            return f"Directions to {b['name']}: {url}"

    # spaCy for named entities and noun chunks
    candidates = set()
    if _SPACY_AVAILABLE and nlp:
        doc = nlp(query)
        for ent in doc.ents:
            if ent.label_ in ("FAC", "ORG", "GPE", "LOC"):
                candidates.add(ent.text.lower())
        for chunk in doc.noun_chunks:
            candidates.add(chunk.text.lower())

    # Fuzzy match
    best, best_score = None, 0
    for phrase in candidates or [query.lower()]:
        match, score, _ = process.extractOne(phrase, BUILDINGS.keys(), scorer=fuzz.token_sort_ratio)
        if score > best_score:
            best, best_score = match, score

    threshold = 75
    if best and best_score and len(best) <= 5:
        threshold = 60

    if best_score >= threshold:
        b = BUILDINGS[best]
        url = f"https://www.google.com/maps/dir/My+Location/{b['lat']},{b['lng']}"
        webbrowser.open(url)
        return f"Directions to {b['name']}: {url}"

    # Last resort: word-level alias search
    words = query.lower().split()
    for w in words:
        if w in BUILDINGS:
            b = BUILDINGS[w]
            url = f"https://www.google.com/maps/dir/My+Location/{b['lat']},{b['lng']}"
            webbrowser.open(url)
            return f"Taking a guess: do you mean {b['name']}? Here's the route: {url}"

    return "I'm not 100% sure, but could you clarify which place you're referring to on campus?"

# Register tools with LangChain
tools = [
    Tool(
        name="UniversityInfo",
        func=university_info_tool,
        description="Answers questions about university, campus, departments, policies, etc."
    ),
    Tool(
        name="Navigation",
        func=navigation_tool,
        description="Provides directions or building locations."
    ),
]

# LangChain agent setup
llm = ChatOpenAI(
    model_name="gpt-4",
    temperature=0.7,
    openai_api_key=OPENAI_API_KEY
)
agent = initialize_agent(
    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=False
)

# ========== UI ==========
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")
FONT = ("Segoe UI", 16)
SM_FONT = ("Segoe UI", 14)

class WUEBChatbotUI(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("WUEB Chatbot")
        self.geometry("700x600")
        self._build()

    def _build(self):
        self.chat_log = ctk.CTkTextbox(self, wrap="word", state="disabled", font=FONT)
        self.chat_log.pack(fill="both", expand=True, padx=10, pady=(10,0))
        frame = ctk.CTkFrame(self)
        frame.pack(fill="x", padx=10, pady=10)
        self.entry = ctk.CTkEntry(frame, placeholder_text="Ask me anything...", font=FONT)
        self.entry.pack(side="left", fill="x", expand=True, padx=(0,10))
        self.entry.bind("<Return>", lambda e: self._on_send())
        self.send_btn = ctk.CTkButton(frame, text="Send", font=SM_FONT, command=self._on_send)
        self.send_btn.pack(side="right")
        self._append_bot("Hello! How can I assist you today?")

    def _append(self, sender: str, text: str):
        self.chat_log.configure(state="normal")
        self.chat_log.insert("end", f"{sender}: {text}\n\n")
        self.chat_log.configure(state="disabled")
        self.chat_log.see("end")

    def _append_user(self, text: str): self._append("You", text)
    def _append_bot(self, text: str):  self._append("Bot", text)

    def _on_send(self):
        question = self.entry.get().strip()
        if not question:
            return
        self._append_user(question)
        self.entry.delete(0, "end")
        self.send_btn.configure(state="disabled")
        threading.Thread(target=self._process, args=(question,), daemon=True).start()

    def _process(self, question: str):
        response = agent.run(question)
        self._append_bot(response)
        self.send_btn.configure(state="normal")

if __name__ == "__main__":
    app = WUEBChatbotUI()
    app.mainloop()
